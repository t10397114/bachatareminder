from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from cachetools import TTLCache
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import Update
from telegram.ext import (
    ContextTypes,
)

import bot
from config import ADMIN_ID, TIMEZONE, logger
from config import GROUPS

processed_callbacks = TTLCache(maxsize=1000, ttl=86400)

def decision_keyboard(group_name):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{group_name}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=f"no|{group_name}")],
        [InlineKeyboardButton("‚è≠ –ù–µ—Ç, –Ω–æ —è —Å–∞–º–∞ –Ω–∞–ø–∏—à—É –≤ –≥—Ä—É–ø–ø—É", callback_data=f"skip|{group_name}")],
    ])


async def ask_admin(group, class_time):
    logger.info(f"[ask_admin] –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ: {group['name']}, —á–∞—Ç: {group['chat_id']}, ADMIN_ID: {ADMIN_ID}")

    if group["ask_day"] == "before":
        text = f"–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç–∏–µ '{group['name']}' –≤ {class_time}?"
    else:
        text = f"–°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –∑–∞–Ω—è—Ç–∏–µ '{group['name']}' –≤ {class_time}?"

    try:
        await bot.app.bot.send_message(
            chat_id=ADMIN_ID,
            text=text,
            reply_markup=decision_keyboard(group['name'])
        )
    except Exception as e:
        logger.info(f"[ask_admin] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, group_name = query.data.split("|")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    now = datetime.now(TIMEZONE)
    day = now.strftime("%Y-%m-%d")
    callback_key = f"{day}|{group_name}"
    if callback_key in processed_callbacks:
        logger.info(f"[callback] Already processed callback: {callback_key}")
        return
    processed_callbacks[callback_key] = True

    group = next((g for g in GROUPS if g["name"] == group_name), None)
    now = datetime.now(ZoneInfo("Asia/Novosibirsk"))
    if group["ask_day"] == "before":
        now = now + timedelta(days=1)
        day_word = "–ó–∞–≤—Ç—Ä–∞"
    else:
        day_word = "–°–µ–≥–æ–¥–Ω—è"

    weekday = now.strftime("%A")

    class_time = group["time"][weekday]

    try:
        if action == "yes":
            logger.info(f"[callback] –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤: {group['name']}, —á–∞—Ç: {group['chat_id']}")
            await context.bot.send_poll(
                chat_id=group["chat_id"],
                question=f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! {day_word} –∑–∞–Ω—è—Ç–∏–µ –≤ {class_time}. –ö—Ç–æ –ø—Ä–∏–¥—ë—Ç?",
                options=["‚úÖ –ü—Ä–∏–¥—É", "‚ùå –ù–µ —Å–º–æ–≥—É"],
                is_anonymous=False,
            )
            await query.edit_message_text("–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")

        elif action == "no":
            await context.bot.send_message(
                chat_id=group["chat_id"],
                text=f"–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! {day_word} –∑–∞–Ω—è—Ç–∏—è –≤ {class_time} –Ω–µ –±—É–¥–µ—Ç."
            )
            await query.edit_message_text("–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ùå")

        elif action == "skip":
            await query.edit_message_text("–•–æ—Ä–æ—à–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üö´")
    except Exception as e:
        logger.info(f"[callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
